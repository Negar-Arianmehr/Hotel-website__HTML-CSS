
/*............logo...........*/
.logo {
  height: 3.25rem;
  margin-left: 2rem ;
}

/*............search...........*/
.search {
  flex: 0 0 45%;

  //Which is that a flex item is becoming a flex container.And that is perfectly possible.So, we now have nested Flexbox.
  display: flex;
  justify-content: center;
  align-items: center;

  @media only screen and (max-width: $bp-smallest) {
    // it will move all the way to the end. it is sit in the last part
    order: 1;
    flex: 0 0 100%;
    background-color: var(--color-Grey-light-2);
  }

  &__input {
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    background-color: var(--color-Grey-light-2);
    border: none;
    padding: .7rem 2rem;
    border-radius: 100px;
    width: 90%;
    transition: all .2s;
    //so this way, the button will move on top of the input
    margin-right: -3.5rem;

    &:focus {
      outline: none;
      width: 100%;
      background-color: var(--color-Grey-light-3);
    }

    &::-webkit-input-placeholder,
    &::placeholder {
      font-weight: 100;
      color: var(--color-gray-light-2);
    }
  }

  //here we have the input, and here we have the button.And they are siblings, okay? And so therefore, we can use the
  // adjacent selector to select the sibling of the selected input,
  &__input:focus + &__button {
    background-color: var(--color-Grey-light-3);
  }

  &__button {
    border: none;
    background-color: var(--color-Grey-light-2);

    &:focus {
      outline: none;
    }

    &:active {
      transform: translateY(2px);
    }
  }

  &__icon {
    height: 2rem;
    width: 2rem;
    fill: var(--color-Grey-dark-3);
  }

}

/*............User Navigation...........*/

.user-nav {
//  we set the align-items to center. And that's why the three elements, the logo, the search bar, and the user nav, are
//vertically centered. But in fact we don't want the nav bar to be vertically centered. And so we override the align-items
//here with align-self, setting it to stretch,
  align-self: stretch;

  display: flex;
  align-items: center;

  //So the user nav and then all of the direct children. And that will have the exact same effect, right? Because we only
  // select the direct children,
  & > * {
    padding: 0 2rem;
    cursor: pointer;
    //all we have to do to fix the fact that this hovering here is not going all the way from the top to the bottom is
    // to then set the height of all of these elements to 100%.
    height: 100%;

    //we want to align the flex items along the cross axis
    display: flex;
    align-items: center;
  }

  & > *:hover {
    background-color: var(--color-Grey-light-2);
  }

  &__icon-box {
    position: relative;
  }

  &__icon {
    height: 2.5rem;
    width: 2.5rem;
    //The fill property is a presentation attribute used to set the color of a SVG shape
    fill: var(--color-Grey);
  }

  &__notification {
    font-size: .8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 100px;
    background-color: var(--color-primary);
    color: #fff;
    position: absolute;
    top: 1.5rem;
    right: 1.1rem;

    //work for text
    display: flex;
    justify-content: center;
    align-items: center;
  }
  //
  //&__user {
  //}

  &__user-photo {
    height: 3.75rem;
    border-radius: 50%;
    margin-right: 1rem;
  }

  ////&__user-name {
  //}
}

/*............SIDE Navigation...........*/

.side-nav {
  font-size: 1.2rem;
  list-style: none;
  margin-top: 3.5rem;

  @media only screen and (max-width: $bp-medium) {
    display: flex;
    margin: 0;
  }

  &__item {
    position: relative;

    &:not(:last-child) {
      margin-bottom: .5rem;

      @media only screen and (max-width: $bp-medium) {
        margin: 0;
      }
    }

    @media only screen and (max-width: $bp-medium) {
      flex: 1;
    }

  }

  //for animation and hover effect
  &__item::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 3px;
    background-color: var(--color-primary);
    transform: scaleY(0);
    //.2s in the last part is the delay for starting second transform
    transition: transform .2s,
                width .4s  cubic-bezier(.99,.01,.01,.99) .2s,
                background-color .1s;
  }

  &__item:hover::before,
  &__item--active::before {
    //it start from center because of transform-origin
    transform: scaleY(1);
    width: 100%;
  }

  &__item:active::before {
    background-color: var(--color-primary-light);
  }

  &__link:link,
  &__link:visited {
    color: var(--color-Grey-light-1);
    text-decoration: none;
    text-transform: uppercase;
    display: block;
    padding: 1.5rem 2.5rem;
    //z-index only work when we have a special position
    position: relative;
    z-index: 10;

    display: flex;
    align-items: center;

    @media only screen and (max-width: $bp-medium) {
      justify-content: center;
      padding: 2rem;
    }

    @media only screen and (max-width: $bp-small) {
      flex-direction: column;
      padding: 1.5rem .5rem;
    }
  }

  &__icon {
    width: 1.7rem;
    height: 1.7rem;
    margin-right: 1.5rem;
    fill: var(--color-Grey-light-1);

    @media only screen and (max-width: $bp-small) {
      margin-right: 0;
      margin-bottom: .7rem;
      height: 1.5rem;
      width: 1.5rem;
    }
  }

}

/*............LEGAL TEXT...........*/

.legal {
  font-size: 1.2rem;
  color: var(--color-Grey-light-4);
  text-align: center;
  padding: 2.5rem;

  @media only screen and (max-width: $bp-medium) {
    display: none;
  }
}
//...............Hotel View..................//
/*............GALLERY...........*/
.gallery {
  display: flex;

  &__photo {
    width: 100%;
    //that's about having a small space underneath an image, which happens when we leave it as an inline element.
    //if we don't want that wide space ,the img has to be block or inline-block
    display: block;
  }
}

/*............Hotel Overview...........*/
.overview {
  display: flex;
  align-items: center;
  //we introduce line in bases
  border-bottom: var(--line);

  &__heading {
    font-size: 2.25rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 3rem;

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
      padding: 1.25rem 2rem;
  }

  }

  &__stars {
    //we want stars to be next to the name of hotel and others things go to the end of line. occupied all available space
    //flex: 1;
    //but we can use margin auto ,it is good trick , because it doesn't occupy additional space
    margin-right: auto;
    //it makes star to be center of height and starts are put in next to each other
    display: flex;
  }

  &__icon-star,
  &__icon-location {
    width: 1.74rem;
    height: 1.75rem;
    fill: var(--color-primary);
  }

  &__location {
    font-size: 1.2rem;
    // we want to vertically align the two elements,
    display: flex;
    vertical-align: center;
  }

  &__icon-location {
    margin-right: .5rem;
  }

  &__rating {
    background-color: var(--color-primary);
    color: #fff;
    margin-left: 3rem;
    padding: 0 2.25rem;
    //align-item: we have it in top, so we can do it here
    align-self: stretch;

    //put the item in the center
    display: flex;
    //we dont want "votes" to be net to rate
    flex-direction: column;
    align-items: center;
    justify-content: center;

    @media only screen and (max-width: $bp-small) {
      padding: 0 1.5rem;
    }
  }

  &__rating-average {
    font-size: 2.25rem;
    font-weight: 300;
    //we want the text to be near the number
    margin-bottom: -3px;

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
    }
  }

  &__rating-count {
    font-size: .8rem;
    text-transform: uppercase;

    @media only screen and (max-width: $bp-small) {
      padding: 0 1.5rem;
    }
  }
}

/*...........BUTTON INLINE............*/

.btn-inline {
  border: none;
  color: var(--color-primary);
  //because we want use it in the diffrent place with different size of text so it is better to inherit it from parent
  font-size: inherit;
  border-bottom: 1px solid currentColor;
  padding-bottom: 2px;
  //we want this to be displayed as an inline-block and not just as inline.
  display: inline-block;
  //there is a background gray color that we dont want it at first.we want it after hover
  background-color: transparent;
  cursor: pointer;
  transition: all .2s;

  & span {
    margin-left: 3px;
  }

  &:hover {
    color: var(--color-Grey-dark-1);

    span {
      margin-left: 8px;
      transition: margin-left .2s;
    }
  }

  &:focus {
    outline: none;
    //infinite , it happens until the hover is on it
    animation: pulsate 1s infinite;
  }
}

//......ANIMATIONwe want this to be displayed
//The @keyframes rule specifies the animation code. Specify when the style change will happen in percent, or with the
// keywords "from" and "to", which is the same as 0% and 100%. 0% is the beginning of the animation, 100% is when the
// animation is complete.
@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: none;
  }

  50% {
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0,0,0,0.25);
  }

  100% {
    transform: scale(1);
    box-shadow: none;
  }
}

////////HOTEL VIEW///////
//PARAGRAPH
.paragraph:not(:last-of-type) {
  margin-bottom: 2rem;
}


//////////////////////////
//LIST
.list {
  list-style: none;
  margin: 3rem 0;
  padding: 3rem 0;
  border-top: var(--line);
  border-bottom: var(--line);

  //all of these are for list item look like in app
  display: flex;
  flex-wrap: wrap;

  &__item {
    flex: 0 0 50%;
    margin-bottom: .7rem;
  }

  &__item::before {
   //it dosnt work till we write these 3 properties
    content: "";
    display: inline-block;
    height: 1rem;
    width: 1rem;
    margin-right: .7rem;

    ////older browser instead of mask
    background-image: url(../img/SVG/chevron-thin-right.svg);
    background-size:cover;

    //newer browsers - masks...what is the masks?
    //remember we also have to specify a value here,and so I'm just gonna put an empty image here,
    //it doesn't really matter.his is just because we really have to specify the value.
    @supports (-webkit-mask-image: url()) or (-webkit-mask-image: url()){
      //Well, basically a mask defines an area where we can look through the element and see what's behind that element.
      //we want to is to set the background-color of this element to a solid color, and then use the icon as the mask.
      //And so we can then look through that mask, basically,and see the background color in the area where the icon is
      //and everything else is covered, and so it's just gonna be white.
      background-color: var(--color-primary);
      -webkit-mask-image: url(../img/chevron-thin-right.svg);
      //without it , we can not see icon completely, because the icon is actually larger than the one rem here,
      -webkit-mask-size: cover;
      mask-image: url(../img/chevron-thin-right.svg);
      mask-size: cover;
      //because of the background-img in the top for old browser we need it
      background-image: none;
    }

  }
}

////////////////////////
//RECOMMEND
.recommend {
  //Now, actually we saw that now these images are, they look like they are smaller, right? Let's check that out. But this
  //is the border, and the border actually goes into these images. So you see that when the border is active the image basically
  //shrinks. And so we have now two options to fix that, we could either add these three pixels here on the height and width,
  //or we can do it automatically. Let's do that automatically by using the box-sizing property. Remember, we set the box-sizing
  //to all the elements to border-box, and what border-box does is that it includes the padding and the border into the width
  //and height of the element. And that's usually exactly what we want. But in this situation, it's not what we want. In this
  //situation we want the border to be added on top of our height and the width.
  box-sizing: content-box;
  font-size: 1.3rem;
  color: var(--color-Grey-dark-3);

  display: flex;
  align-items: center;

  &__count {
    //for creating a space between the element ,it is tricky method
    margin-right: auto;
  }

  &__friends {
    //we put it here because of small screen, when max-width start from 900, we want the pics will be next to each other
    //it is a very good solution
    display: flex;
  }

  &__photo {
    height: 4rem;
    width: 4rem;
    border-radius: 50%;
    border: 3px solid #fff;

    &:not(:last-child) {
      margin-right: -1.2rem;
    }
  }
}

///////////////////////////////
//review

.review {
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  margin-bottom: 3.5rem;
  position: relative;
  overflow: hidden;

  @media only screen and (max-width: $bp-medium) {
    padding: 2rem;
    margin-bottom: 3rem;
  }

  &__text {
    margin-bottom: 2rem;
    z-index: 10;
    position: relative;
  }

  &__user {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  &__photo {
    height: 4.5rem;
    width: 4.5rem;
    border-radius: 50%;
    margin-right: 1.5rem;
  }

  &__user-box {
    margin-right: auto;
  }

  &__user-name {
    font-size: 1.1rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: .4rem;
  }

  &__user-date {
    font-size: 1rem;
    color: var(--color-Grey-dark-3);
  }

  &__rating {
    color: var(--color-primary);
    font-size: 2.2rem;
    font-weight: 300;
  }

  &::before {
    content: "\201C";
    position: absolute;
    top:-2.75rem;
    left: -1rem;
    line-height: 1;
    font-size: 19.2rem;
    color: var(--color-Grey-light-2);
    font-family: sans-serif;
    z-index: 1;
  }
}

/////////////////////////////
//call to action

.cta {
  padding: 3.5rem 0;
  text-align: center;

  @media only screen and (max-width: $bp-medium) {
    padding: 2.5rem;
  }

  &__book-now {
    font-size: 2rem;
    font-weight: 300;
    text-transform: uppercase;
    margin-bottom: 2.5rem;
  }
}

/////////////////////////////
//call to action button

.btn {
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  border-radius: 100px;
  border: none;
  background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary-dark));
  color: #fff;
  position: relative;
  //it is outside of button and it is there so we have to hide it
  overflow: hidden;

  //because we have some common properties for child element
  & > * {
    //span is the inline element so we change it
    display: inline-block;
    //to get the parent's height and width
    height: 100%;
    width: 100%;
    transition: all .2s;
  }

  &__visible {
    padding: 2rem 7.5rem;
  }

  &__invisible {
    padding: 2rem 0;
    //we want the back part to go to the outside of button and sit on top of the button
    position: absolute;
    left: 0;
    //it's going to move up exactly the size of the element.
    top: -100%;
  }

&:hover {
  background-image: linear-gradient(to left, var(--color-primary-light), var(--color-primary-dark));
  cursor: pointer;
}
  &:hover &__visible {
    transform: translateY(100%);
  }

  &:hover &__invisible {
    top: 0;
  }

  &:focus {
    outline: none;
    animation: pulsate 1s infinite;
  }
}